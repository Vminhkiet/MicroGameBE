// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v3.21.12
// source: action/action.proto

package action

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ActionType int32

const (
	ActionType_NONE   ActionType = 0
	ActionType_ATTACK ActionType = 1
	ActionType_ULTI   ActionType = 2
	ActionType_SPELL  ActionType = 3
)

// Enum value maps for ActionType.
var (
	ActionType_name = map[int32]string{
		0: "NONE",
		1: "ATTACK",
		2: "ULTI",
		3: "SPELL",
	}
	ActionType_value = map[string]int32{
		"NONE":   0,
		"ATTACK": 1,
		"ULTI":   2,
		"SPELL":  3,
	}
)

func (x ActionType) Enum() *ActionType {
	p := new(ActionType)
	*p = x
	return p
}

func (x ActionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ActionType) Descriptor() protoreflect.EnumDescriptor {
	return file_action_action_proto_enumTypes[0].Descriptor()
}

func (ActionType) Type() protoreflect.EnumType {
	return &file_action_action_proto_enumTypes[0]
}

func (x ActionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ActionType.Descriptor instead.
func (ActionType) EnumDescriptor() ([]byte, []int) {
	return file_action_action_proto_rawDescGZIP(), []int{0}
}

type SpellCast struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SpellId       int32                  `protobuf:"varint,1,opt,name=spellId,proto3" json:"spellId,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SpellCast) Reset() {
	*x = SpellCast{}
	mi := &file_action_action_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SpellCast) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpellCast) ProtoMessage() {}

func (x *SpellCast) ProtoReflect() protoreflect.Message {
	mi := &file_action_action_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpellCast.ProtoReflect.Descriptor instead.
func (*SpellCast) Descriptor() ([]byte, []int) {
	return file_action_action_proto_rawDescGZIP(), []int{0}
}

func (x *SpellCast) GetSpellId() int32 {
	if x != nil {
		return x.SpellId
	}
	return 0
}

type Player_Action struct {
	state    protoimpl.MessageState `protogen:"open.v1"`
	PlayerId uint32                 `protobuf:"varint,1,opt,name=playerId,proto3" json:"playerId,omitempty"`
	MoveX    float32                `protobuf:"fixed32,2,opt,name=moveX,proto3" json:"moveX,omitempty"`
	MoveY    float32                `protobuf:"fixed32,3,opt,name=moveY,proto3" json:"moveY,omitempty"`
	DirX     float32                `protobuf:"fixed32,4,opt,name=dirX,proto3" json:"dirX,omitempty"`
	DirY     float32                `protobuf:"fixed32,5,opt,name=dirY,proto3" json:"dirY,omitempty"`
	// Types that are valid to be assigned to CombatAction:
	//
	//	*Player_Action_IsAttacking
	//	*Player_Action_IsUsingUlti
	//	*Player_Action_SpellCast
	CombatAction  isPlayer_Action_CombatAction `protobuf_oneof:"combatAction"`
	Tick          int32                        `protobuf:"varint,9,opt,name=tick,proto3" json:"tick,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Player_Action) Reset() {
	*x = Player_Action{}
	mi := &file_action_action_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Player_Action) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Player_Action) ProtoMessage() {}

func (x *Player_Action) ProtoReflect() protoreflect.Message {
	mi := &file_action_action_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Player_Action.ProtoReflect.Descriptor instead.
func (*Player_Action) Descriptor() ([]byte, []int) {
	return file_action_action_proto_rawDescGZIP(), []int{1}
}

func (x *Player_Action) GetPlayerId() uint32 {
	if x != nil {
		return x.PlayerId
	}
	return 0
}

func (x *Player_Action) GetMoveX() float32 {
	if x != nil {
		return x.MoveX
	}
	return 0
}

func (x *Player_Action) GetMoveY() float32 {
	if x != nil {
		return x.MoveY
	}
	return 0
}

func (x *Player_Action) GetDirX() float32 {
	if x != nil {
		return x.DirX
	}
	return 0
}

func (x *Player_Action) GetDirY() float32 {
	if x != nil {
		return x.DirY
	}
	return 0
}

func (x *Player_Action) GetCombatAction() isPlayer_Action_CombatAction {
	if x != nil {
		return x.CombatAction
	}
	return nil
}

func (x *Player_Action) GetIsAttacking() bool {
	if x != nil {
		if x, ok := x.CombatAction.(*Player_Action_IsAttacking); ok {
			return x.IsAttacking
		}
	}
	return false
}

func (x *Player_Action) GetIsUsingUlti() bool {
	if x != nil {
		if x, ok := x.CombatAction.(*Player_Action_IsUsingUlti); ok {
			return x.IsUsingUlti
		}
	}
	return false
}

func (x *Player_Action) GetSpellCast() *SpellCast {
	if x != nil {
		if x, ok := x.CombatAction.(*Player_Action_SpellCast); ok {
			return x.SpellCast
		}
	}
	return nil
}

func (x *Player_Action) GetTick() int32 {
	if x != nil {
		return x.Tick
	}
	return 0
}

type isPlayer_Action_CombatAction interface {
	isPlayer_Action_CombatAction()
}

type Player_Action_IsAttacking struct {
	IsAttacking bool `protobuf:"varint,6,opt,name=isAttacking,proto3,oneof"`
}

type Player_Action_IsUsingUlti struct {
	IsUsingUlti bool `protobuf:"varint,7,opt,name=isUsingUlti,proto3,oneof"`
}

type Player_Action_SpellCast struct {
	SpellCast *SpellCast `protobuf:"bytes,8,opt,name=spellCast,proto3,oneof"`
}

func (*Player_Action_IsAttacking) isPlayer_Action_CombatAction() {}

func (*Player_Action_IsUsingUlti) isPlayer_Action_CombatAction() {}

func (*Player_Action_SpellCast) isPlayer_Action_CombatAction() {}

var File_action_action_proto protoreflect.FileDescriptor

const file_action_action_proto_rawDesc = "" +
	"\n" +
	"\x13action/action.proto\x12\x06action\"%\n" +
	"\tSpellCast\x12\x18\n" +
	"\aspellId\x18\x01 \x01(\x05R\aspellId\"\x9e\x02\n" +
	"\rPlayer_Action\x12\x1a\n" +
	"\bplayerId\x18\x01 \x01(\rR\bplayerId\x12\x14\n" +
	"\x05moveX\x18\x02 \x01(\x02R\x05moveX\x12\x14\n" +
	"\x05moveY\x18\x03 \x01(\x02R\x05moveY\x12\x12\n" +
	"\x04dirX\x18\x04 \x01(\x02R\x04dirX\x12\x12\n" +
	"\x04dirY\x18\x05 \x01(\x02R\x04dirY\x12\"\n" +
	"\visAttacking\x18\x06 \x01(\bH\x00R\visAttacking\x12\"\n" +
	"\visUsingUlti\x18\a \x01(\bH\x00R\visUsingUlti\x121\n" +
	"\tspellCast\x18\b \x01(\v2\x11.action.SpellCastH\x00R\tspellCast\x12\x12\n" +
	"\x04tick\x18\t \x01(\x05R\x04tickB\x0e\n" +
	"\fcombatAction*7\n" +
	"\n" +
	"ActionType\x12\b\n" +
	"\x04NONE\x10\x00\x12\n" +
	"\n" +
	"\x06ATTACK\x10\x01\x12\b\n" +
	"\x04ULTI\x10\x02\x12\t\n" +
	"\x05SPELL\x10\x03B\x14Z\x12pkg/packets/actionb\x06proto3"

var (
	file_action_action_proto_rawDescOnce sync.Once
	file_action_action_proto_rawDescData []byte
)

func file_action_action_proto_rawDescGZIP() []byte {
	file_action_action_proto_rawDescOnce.Do(func() {
		file_action_action_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_action_action_proto_rawDesc), len(file_action_action_proto_rawDesc)))
	})
	return file_action_action_proto_rawDescData
}

var file_action_action_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_action_action_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_action_action_proto_goTypes = []any{
	(ActionType)(0),       // 0: action.ActionType
	(*SpellCast)(nil),     // 1: action.SpellCast
	(*Player_Action)(nil), // 2: action.Player_Action
}
var file_action_action_proto_depIdxs = []int32{
	1, // 0: action.Player_Action.spellCast:type_name -> action.SpellCast
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_action_action_proto_init() }
func file_action_action_proto_init() {
	if File_action_action_proto != nil {
		return
	}
	file_action_action_proto_msgTypes[1].OneofWrappers = []any{
		(*Player_Action_IsAttacking)(nil),
		(*Player_Action_IsUsingUlti)(nil),
		(*Player_Action_SpellCast)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_action_action_proto_rawDesc), len(file_action_action_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_action_action_proto_goTypes,
		DependencyIndexes: file_action_action_proto_depIdxs,
		EnumInfos:         file_action_action_proto_enumTypes,
		MessageInfos:      file_action_action_proto_msgTypes,
	}.Build()
	File_action_action_proto = out.File
	file_action_action_proto_goTypes = nil
	file_action_action_proto_depIdxs = nil
}
